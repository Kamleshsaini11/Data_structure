import java.lang.String;
import java.util.*;
class Matrix_chain_dp_dt
{
    int bracket[][]=new int[1][1];
    int mini_multi[][]=new int[1][1];
    Matrix_chain_dp_dt(int n)
    {
        int arr1[][]=new int[n+1][n+1];
        int arr2[][]=new int[n+1][n+1];
        for(int i=0;i<n+1;i++)
           for(int j=0;j<n+1;j++)
           {
               arr1[i][j]=0;
               arr2[i][j]=0;
           }
        bracket=arr1;
        mini_multi=arr2;
    } 
    public int pare_Mat(int[] p,int n)
    {
        /*--------Methodology-----------
          Lets take a example of ABCD
          first we will find minimum number of scaler multiplication and brackets for
          AB BC CD  then
          ABC BCD   then
          ABCD
          So by doing like above we will have minimum number of scaler multiplication and brackets
          for all the subproblems when i solve a perticuler problem    
        */
        for(int L=2;L<=n;L++)                   // For length
        {
            for(int j=1;j<=n-L+1;j++)
            {
                int min=Integer.MAX_VALUE;
                for(int k=j;k<j+L-1;k++)         // Here it become like dp_td with i=j and j=j+L-1 and with store value of all subproblems
                {
                    int a=mini_multi[j][k]+mini_multi[k+1][j+L-1]+p[j-1]*p[k]*p[j+L-1];
                    if (min>a)
                    {
                        min=a;
                        mini_multi[j][j+L-1]=min;
                        bracket[j][j+L-1]=k;
                    }
                }
            }
        }
        return mini_multi[1][n];
    }
    public void print(String str,int i,int j)
    {
        if (i==j)
        {
            System.out.print(str.charAt(i-1));
            return ;
        }
        System.out.print("(");
        print(str,i,bracket[i][j]);
        print(str,bracket[i][j]+1,j);   
        System.out.print(")");
    }
    public static void main(String args[])
    {
        int p[]={10, 30, 5, 60,7,46,30,27};  // array of dimention(ith arr have p[i-1] row and p[i] column)
        String str="ABCDEFG";
        Matrix_chain_dp_dt obj=new Matrix_chain_dp_dt(str.length());
        int ans=obj.pare_Mat(p,7);
        System.out.print("Parenthesization in given matrix chain is ");
        obj.print(str,1,str.length());
        System.out.println("");
        System.out.print("Minimum number of multiplication is "+ans);
    }
}